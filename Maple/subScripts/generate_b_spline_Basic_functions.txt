with(LinearAlgebra):
gNBFhckv:=proc(knvec,xi) 
   description "Generate NURBS Basic functions with a open uniform Knotvector with p+1 continous at the boundary and q continous at the inner elements":
local i,j,h,N,nk,MyHandler,Nbig, ncp,diffN,p:
p:=0:
for i from 1 while knvec[i]=knvec[i+1] do
	p:=p+1:
od:

ncp:=Dimension(knvec)-(p+1);
nk:=Dimension(knvec):
Nbig:=Matrix(nk-1,p+1):

diffN:=Vector(ncp):
for j from 1 to nk-1 do
   if knvec[j+1] = knvec[j] then
    	Nbig[j,1]=0: 
	else 
		Nbig[j,1]:= piecewise(xi>=knvec[j] and xi< knvec[j+1],1):
   	end if:
end do:

MyHandler := proc(operator,defVal): 
   return 0;
end proc:

NumericEventHandler(division_by_zero=MyHandler):

for j from 2 to p+1 do 
   for i from 1 to nk-j do
      Nbig[i,j]:=(xi-knvec[i])/(knvec[i+j-1]-knvec[i])*Nbig[i,j-1]+(knvec[i+j-1+1]-xi)/(knvec[i+j-1+1]-knvec[i+1])*Nbig[i+1,j-1]: 
      
   end do: 
end do:

for i from 1 to ncp do
    diffN[i]:=(p)/(knvec[i+p]-knvec[i])*Nbig[i,p]-(p)/(knvec[i+p+1]-knvec[i+1])*Nbig[i+1,p]:
od:


N:=Nbig[1..ncp,p+1]:
NumericEventHandler(division_by_zero=default):
return N,diffN;
end proc:
